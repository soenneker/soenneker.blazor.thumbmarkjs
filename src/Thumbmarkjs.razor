@using Microsoft.JSInterop
@using Soenneker.Blazor.Thumbmarkjs.Abstract
@using Microsoft.Extensions.Logging
@using System.Threading
@using System.Text.Json
@using Soenneker.Blazor.Thumbmarkjs.Configuration
@using Soenneker.Extensions.CancellationTokens
@using Soenneker.Blazor.Extensions.EventCallback;

@inherits Soenneker.Quark.CoreCancellableComponent
@implements IThumbmarkjs

<div id="@Id" @attributes="Attributes"></div>

@code {

    [Inject]
    private IThumbmarkjsInterop ThumbmarkjsInterop { get; set; } = null!;

    [Inject]
    private ILogger<Thumbmarkjs> Logger { get; set; } = null!;

    [Parameter]
    public ThumbmarkjsOptions? Options { get; set; }

    [Parameter]
    public EventCallback<string> OnGenerated { get; set; }

    [Parameter]
    public EventCallback<JsonElement> OnDataGenerated { get; set; }

    public override string? Id { get; set; } = $"thumbmarkjs-{Guid.NewGuid()}";

    private DotNetObjectReference<Thumbmarkjs>? _dotNetReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetReference = DotNetObjectReference.Create(this);

            bool useCdn = Options?.UseCdn ?? true;

            await ThumbmarkjsInterop.Initialize(_dotNetReference, useCdn);
            await ThumbmarkjsInterop.CreateObserver(Id);
        }
    }

    [JSInvokable("OnGenerated")]
    public Task OnGeneratedJs(string thumbmark)
    {
        return OnGenerated.InvokeIfHasDelegate(thumbmark);
    }

    [JSInvokable("OnDataGenerated")]
    public Task OnDataGeneratedJs(JsonElement jsonElement)
    {
        return OnDataGenerated.InvokeIfHasDelegate(jsonElement);
    }

    public async ValueTask SetOptions(object options, CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await ThumbmarkjsInterop.SetOptions(Id, options, linked);
    }

    public async ValueTask<string?> Get(CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            return await ThumbmarkjsInterop.Get(Id, linked);
    }

    public async ValueTask<JsonElement?> GetData(CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            return await ThumbmarkjsInterop.GetData(Id, linked);
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();

        _dotNetReference?.Dispose();
    }

}